/*
 * Copyright (c) 2016. Trevor Jones
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'nebula.kotlin'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven'
apply plugin: 'de.undercouch.download'

group = rootProject.group
version = rootProject.version
sourceCompatibility = 1.8

gradlePlugin {
    plugins {
        AvdPlugin {
            id = "AVD"
            implementationClass = "com.trevjonez.avdgp.AvdPlugin"
        }
    }
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    compile group: 'com.android.tools.build', name: 'gradle', version: android_plugin_version
    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.1.5'
    compile group: 'com.squareup.okio', name: 'okio', version: '1.13.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
}

Properties localProperties = new Properties()
File localPropFile = new File(project.projectDir, "local.properties")
if (localPropFile.exists())
    localProperties.load(new FileInputStream(localPropFile))

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    systemProperty("avd_plugin_version", version)
    systemProperty("sdkPath", "$buildDir/Android/sdk/")
    if (localProperties.getProperty("useProxy", "false") == "true") {
        systemProperty("useProxy", "true")
        systemProperty("proxyIp", localProperties.getProperty("proxyIp", "localhost"))
        systemProperty("proxyPort", localProperties.getProperty("proxyPort", "3128"))
    }
        outputs.upToDateWhen { false }
}

tasks.findByPath('test').dependsOn(':plugin:install')
tasks.findByPath('test').dependsOn(':plugin:unzipSdkTools')
tasks.findByPath('test').dependsOn(':plugin:unzipPlatformTools')

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.artifactId = 'AVD-Gradle-Plugin'
        pom.project {
            inceptionYear '2016'
            licenses {
                license {
                    //noinspection GroovyAssignabilityCheck
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }
}

import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.taskdefs.condition.Os

task downloadSdkTools(type: Download) {

    def isWindows = false
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** WINDOWS "
        isWindows = true
    }
    src isWindows ? "https://dl.google.com/android/repository/sdk-tools-windows-4333796.zip"
            :"https://dl.google.com/android/repository/sdk-tools-darwin-4333796.zip"

    dest file("$buildDir/sdk-tools.zip")
    onlyIfModified true
}

task downloadPlatformTools(type: Download) {

    def isWindows = false
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** WINDOWS "
        isWindows = true
    }

    src isWindows ? "https://dl.google.com/android/repository/platform-tools-latest-windows.zip"
            :"https://dl.google.com/android/repository/platform-tools-latest-darwin.zip"
    dest file("$buildDir/platform-tools.zip")
    onlyIfModified true
}

task unzipSdkTools(type: Copy) {
    from zipTree(downloadSdkTools.dest)
    into file("$buildDir/Android/sdk/")
    dependsOn downloadSdkTools
}

task unzipPlatformTools(type: Copy) {
    from zipTree(downloadPlatformTools.dest)
    into file("$buildDir/Android/sdk/")
    dependsOn downloadPlatformTools
}